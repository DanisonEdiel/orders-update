name: Deploy to EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Install Gradle 8.5
        run: |
          wget -q https://services.gradle.org/distributions/gradle-8.5-bin.zip
          unzip -q gradle-8.5-bin.zip
          export PATH=$PWD/gradle-8.5/bin:$PATH
          echo "PATH=$PWD/gradle-8.5/bin:$PATH" >> $GITHUB_ENV
          gradle --version

      - name: Build with Gradle
        run: gradle build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/orders-update:latest,${{ secrets.DOCKERHUB_USERNAME }}/orders-update:${{ github.sha }}
          no-cache: true

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 180s
          command_timeout: 20m
          debug: true
          script: |
            # Crear directorio si no existe
            mkdir -p ~/orders-update
            cd ~/orders-update
            
            # Instalar Docker si no está instalado
            if ! command -v docker &> /dev/null; then
              echo "Instalando Docker..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt-get update
              sudo apt-get install -y docker-ce
              sudo usermod -aG docker $USER
              echo "Docker instalado correctamente"
            fi
            
            # Instalar Docker Compose si no está instalado
            if ! command -v docker-compose &> /dev/null; then
              echo "Instalando Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              echo "Docker Compose instalado correctamente"
            fi
            
            # Forzar eliminación de contenedores e imágenes
            sudo docker-compose down || true
            sudo docker rm -f orders-update orders-db orders-grafana || true
            sudo docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/orders-update:latest || true
            
            # Forzar pull de la imagen más reciente
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/orders-update:latest
            
            # Crear .env file con secretos
            cat > .env << EOL
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            ORDER_CREATED_TOPIC_ARN=${{ secrets.ORDER_CREATED_TOPIC_ARN }}
            EOL
            
            # Crear o actualizar docker-compose.yml
            cat > docker-compose.yml << EOL
            version: '3.8'
            
            services:
              orders-update:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/orders-update:latest
                container_name: orders-update
                restart: always
                ports:
                  - "8080:8080"
                env_file:
                  - .env
                networks:
                  - orders-network
            
              postgres:
                image: postgres:14
                container_name: orders-db
                restart: always
                environment:
                  POSTGRES_DB: orders_db
                  POSTGRES_USER: \${DB_USERNAME}
                  POSTGRES_PASSWORD: \${DB_PASSWORD}
                ports:
                  - "5432:5432"
                volumes:
                  - postgres-data:/var/lib/postgresql/data
                networks:
                  - orders-network
            
              orders-grafana:
                image: grafana/grafana
                container_name: orders-grafana
                restart: always
                ports:
                  - "3000:3000"
                environment:
                  - GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
                  - GF_USERS_ALLOW_SIGN_UP=false
                  - GF_INSTALL_PLUGINS=grafana-postgresql-datasource
                volumes:
                  - grafana-data:/var/lib/grafana
                networks:
                  - orders-network
            
            volumes:
              postgres-data:
              grafana-data:
            
            networks:
              orders-network:
                name: orders-network
            EOL
            
            # Crear red si no existe
            sudo docker network inspect orders-network >/dev/null 2>&1 || sudo docker network create orders-network
            
            # Iniciar servicios con recreación forzada
            sudo docker-compose up -d --force-recreate
            
            # Mostrar contenedores en ejecución
            sudo docker ps
